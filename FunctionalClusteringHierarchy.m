function FunctionalClusteringHierarchy(InputMatrix)
%FUNCTIONALCLUSTERINGHIERARCHY This function takes any ImputMatrix of the
%format [Identifier,Row,Origin,Column,Percent] Where Identifier is the
%number of each circle, Row is the row of the chart,
%Origin is the circle number from which it is originating, Column is 
%the column within the group that the circle is in, and Percent is the
%proportion of the network that the module takes up.
% InputMatrix =[1,1,0,1,100.0000;...
%     2,2,1,1,33.3000;...
%     3,2,1,2,33.3000;...
%     4,2,1,3,33.3000;...
%     5,3,3,1,9.5143;...
%     6,3,3,2,9.5143;...
%     7,3,3,3,9.5143;...
%     8,3,3,4,9.5143;...
%     9,3,4,1,9.5143;...
%    10,3,4,2,9.5143;...
%    11,3,4,3,9.5143;...
%    12,4,8,1,3.1714;...
%    13,4,8,2,3.1714;...
%    14,4,8,3,3.1714]
%
% FunctionalClusteringHierarchy(InputMatrix);



%% Defining Variables and Creating Figure

% Take the square root of the values given in column five 
InputMatrix(:,5)=sqrt(InputMatrix(:,5));

NumberOfGroups=numel(unique(InputMatrix(:,3)));
NumberOfRows=max(InputMatrix(:,2));
Groups=unique(InputMatrix(:,3));
Centers=[0,0];
Count=1;
Spacing(NumberOfRows)=max(InputMatrix(InputMatrix(:,2)...
    ==max(InputMatrix(:,2)),5))*2;
for n=fliplr(1:NumberOfRows-1)
    Spacing(n)=Spacing(n+1)*max(InputMatrix(InputMatrix(:,2)...
        ==n+1,4));
end
figure
set(gcf,'Color',[0.95,0.98,0.98],'Name','Functional Clustering Hierarchy')
title('Functional Clustering Hierarchy','FontSize', 30,'fontWeight','bold','FontName','Candara','Color',[0.2549,0.3373,0.7725]);
axis off
axis equal
hold on

%% Plotting the Circles and Brackets

rectangle('Position',[0-InputMatrix(1,5),...
    0-InputMatrix(1,5),2*InputMatrix(1,5),...
    2*InputMatrix(1,5)],'Curvature',[1,1],'FaceColor',[0.1373,0.1373,0.5569],'EdgeColor','None');
text(0,0,num2str(InputMatrix(1,5)^2),'color','white','HorizontalAlignment', 'center');
for n=2:NumberOfGroups
    CurrentRow=max(InputMatrix(InputMatrix(:,3)==Groups(n),2));
    LargestRadiusOfLastRow=max(InputMatrix(InputMatrix(:,2)...
        ==(max(InputMatrix(InputMatrix(:,3)==Groups(n),2))-1),5));
    NumberOfCircles=numel(InputMatrix(InputMatrix(:,3)==Groups(n),5));
    LargestRadius=max(InputMatrix(InputMatrix(:,3)==Groups(n),5));
    Radii=InputMatrix(InputMatrix(:,3)==Groups(n),5);
    Y=Centers(Groups(n),2)-LargestRadiusOfLastRow-2*LargestRadius;
    if Spacing(CurrentRow)>LargestRadius*2
        X=linspace(Centers(Groups(n),1)-Spacing(CurrentRow)*NumberOfCircles/2,...
            Centers(Groups(n),1)+Spacing(CurrentRow)*NumberOfCircles/2,NumberOfCircles);
        plot([Centers(Groups(n),1)-Spacing(CurrentRow)*NumberOfCircles/2,...
            Centers(Groups(n),1),Centers(Groups(n),1),Centers(Groups(n),1),...
            Centers(Groups(n),1)+Spacing(CurrentRow)*NumberOfCircles/2],...
            [Y+1.5*LargestRadius,Y+1.5*LargestRadius,Centers(Groups(n),2)-InputMatrix(Groups(n),5),...
            Y+1.5*LargestRadius,Y+1.5*LargestRadius],'LineWidth',3,'Color',[0.1373,0.1373,0.5569]);
    else
        X=linspace(Centers(Groups(n),1)-LargestRadius*(NumberOfCircles-1),...
            Centers(Groups(n),1)+LargestRadius*(NumberOfCircles-1),NumberOfCircles);
        plot([Centers(Groups(n),1)-LargestRadius*(NumberOfCircles-1),...
            Centers(Groups(n),1),Centers(Groups(n),1),Centers(Groups(n),1),...
            Centers(Groups(n),1)+LargestRadius*(NumberOfCircles-1)],...
            [Y+1.5*LargestRadius,Y+1.5*LargestRadius,Centers(Groups(n),2)-InputMatrix(Groups(n),5),...
            Y+1.5*LargestRadius,Y+1.5*LargestRadius],'LineWidth',3,'Color',[0.1373,0.1373,0.5569]);
    end
    for t=1:NumberOfCircles
        Count=Count+1;
        rectangle('Position',[X(t)-Radii(t),Y-Radii(t),2*Radii(t),2*Radii(t)],'Curvature',[1,1],'FaceColor',[0.1373,0.1373,0.5569],'EdgeColor','None')
        Centers(Count,:)=[X(t),Y];
        plot([X(t),X(t)],[Y+Radii(t),Y+1.5*LargestRadius],'LineWidth',3,'Color',[0.1373,0.1373,0.5569]);
        text(X(t),Y,num2str(InputMatrix(Count,5)^2),'color','white','HorizontalAlignment', 'center');
    end
end

end


